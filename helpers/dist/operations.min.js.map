{"version":3,"sources":["operations.js"],"names":["operation","display2","document","querySelector","accumulated","counter","formatNumber","displayTextContent","replaceAll","replace","setCounter","arguments","length","undefined","value","setAccumulated","setOperation","displayText","textContent","addNumber","showError","toLocaleString","maximumFractionDigits","subtractNumber","console","log","multiplyNumber","divideNumber","displayValue","percentNumber","resultNumber","classList","remove"],"mappings":"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","file":"operations.min.js","sourcesContent":["const display2 = document.querySelector('#display2');\nlet accumulated = 0;\nlet operation;\nlet counter = 0;\n\nconst formatNumber = ( displayTextContent )=> {\n\n  // CON ESTA FUNCION CORRIJO EL BUG DEL PUNTO EN NUMEROS ENTEROS EN ESPAÃ‘OL\n  return parseFloat( displayTextContent.replaceAll('.','').replace(',','.') ); \n\n}\n\nexport const setCounter = (value = counter)=> {\n  counter = value\n  return counter\n}\n\nexport const setAccumulated = (value = accumulated)=> {\n  accumulated = value\n  return accumulated\n}\n\nexport const setOperation = (value = operation)=> {\n  operation = value\n  return operation\n}\n\nexport const addNumber = ()=> {\n\n  if ( displayText.textContent === '0' && operation === 'divide' ) {\n    showError();\n    return\n  }\n    \n  if ( operation === 'result' ) {\n    displayText.textContent = '0'\n    operation = 'add'\n    return\n  }\n\n  if( ! display2.textContent ) { \n    display2.textContent = displayText.textContent + ' + ';\n    accumulated += formatNumber( displayText.textContent );\n    counter += 1\n    operation = 'add'\n    return\n  };\n  \n  if (operation === 'subtract') {\n    accumulated -= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' - '\n  }else if( operation === 'percent' ){\n    displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  }else if( operation === 'divide' ){\n    accumulated /= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' / '\n  }else{\n    accumulated += formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' + '\n  }\n  \n  displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  counter += 1;\n  operation = 'add'\n  \n}\n  \nexport const subtractNumber = ()=> {\n\n    if ( displayText.textContent === '0' && operation === 'divide' ) {\n      showError();\n      return\n    }\n\n    if ( operation === 'result' ) {\n      displayText.textContent = '0'\n      operation = 'subtract'\n      return\n    }\n    \n    if( !display2.textContent &&  displayText.textContent === '0' ) { \n      display2.textContent = '0 - ';\n      accumulated = formatNumber( displayText.textContent );\n      counter += 1\n      operation = 'subtract'\n      console.log(\"Entro aca!\")\n      return\n    };\n    \n    if( !display2.textContent ) { \n      display2.textContent = displayText.textContent + ' - ';\n      accumulated = formatNumber( displayText.textContent );\n      counter += 1\n      operation = 'subtract'\n      return\n    };\n    \n    if ( display2.textContent === '0 - ') {\n      display2.textContent =  '- ' + accumulated\n      accumulated -= formatNumber( displayText.textContent );\n      displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      counter += 1\n      operation = 'subtract'\n      return\n    }\n    \n    if (operation === 'add') {\n      accumulated += formatNumber( displayText.textContent );\n      display2.textContent = accumulated + ' + '\n    }else if( operation === 'percent' ){\n      displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n    }else if( operation === 'divide' ){\n      accumulated /= formatNumber( displayText.textContent );\n      display2.textContent = accumulated + ' / '\n    }else {\n      accumulated -= formatNumber( displayText.textContent );\n      display2.textContent = accumulated + ' - '\n    }\n    \n    displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n    counter += 1;\n    operation = 'subtract'\n    \n}\n  \nexport const multiplyNumber = ()=>{\n\n  if ( displayText.textContent === '0' && operation === 'divide' ) {\n    showError();\n    return\n  }\n  \n  if ( operation === 'result' ) {\n    displayText.textContent = '0'\n    operation = 'multiply'\n    return\n  }\n\n  if( !display2.textContent ) { \n    accumulated = formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' * ';\n    counter += 1\n    operation = 'multiply'\n    return\n  };\n  \n  if (operation === 'subtract') {\n    accumulated -= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' - '\n  }else if( operation === 'divide' ){\n    accumulated /= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' / '\n  }else {\n    accumulated *= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' * '\n  }\n  \n  displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  counter += 1;\n  operation = 'multiply'\n}\n\nexport const divideNumber = ()=>{\n  \n    \n  if ( operation === 'result' ) {\n    displayText.textContent = '0'\n    operation = 'divide'\n    return\n  }\n\n  if( !display2.textContent ) { \n    accumulated = formatNumber( displayText.textContent );\n    display2.textContent = displayText.textContent + ' / ';\n    counter += 1\n    operation = 'divide'\n    return\n  };\n\n  if ( displayText.textContent === '0' ) {\n    showError()\n    return\n  }\n  \n  if (operation === 'subtract') {\n    accumulated -= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' - '\n  }else {\n    accumulated /= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' / '\n  }\n  \n  displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  counter += 1;\n  operation = 'divide'\n}\n\nexport const percentNumber = ()=>{\n  \n  if ( displayText.textContent === '0' && operation === 'divide' ) {\n    showError();\n    return\n  }\n\n  if ( operation === 'result' ) {\n    displayText.textContent = '0'\n    operation = 'percent'\n    return\n  };\n\n  if ( accumulated === 0 ) {\n    displayText.textContent = '0';\n    counter += 1\n    operation = 'percent'\n    return\n  }\n\n  if ( !display2.textContent ) { \n    display2.textContent = 0;\n    accumulated = 0;\n    counter += 1\n    operation = 'percent'\n    return\n  };\n\n  let displayValue = accumulated * formatNumber( displayText.textContent ) / 100;\n  \n  switch ( operation ) {\n    case 'add':\n      accumulated += displayValue;\n      displayText.textContent = displayValue;\n      display2.textContent = display2.textContent + displayValue;\n      break;\n    case 'subtract':\n      accumulated -= displayValue;\n      displayText.textContent = displayValue;\n      display2.textContent = display2.textContent + displayValue;\n      break;\n    case 'multiply':\n      accumulated *=  formatNumber( displayText.textContent ) / 100 ;\n      displayText.textContent = formatNumber( displayText.textContent ) / 100 ;\n      display2.textContent = display2.textContent + formatNumber( displayText.textContent ) / 100;\n      break;\n    case 'divide':\n      accumulated /=  formatNumber( displayText.textContent ) / 100;\n      displayText.textContent = formatNumber( displayText.textContent ) / 100 ;\n      display2.textContent = display2.textContent + formatNumber( displayText.textContent ) / 100;\n      break;\n  }\n        \n  counter += 1;\n  operation = 'percent'\n};\n\nexport const resultNumber = ()=> {\n  \n  if ( !operation ) return;\n\n  if ( displayText.textContent === '0' && operation === 'divide' ) {\n    showError();\n    return\n  }\n\n  switch ( operation ) {\n    case 'add':\n      display2.textContent = display2.textContent + displayText.textContent + ' ='\n      displayText.textContent = ( accumulated + formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      break;\n    case 'subtract':\n      if ( display2.textContent === '- ' ) { \n        display2.textContent = '- ' + displayText.textContent\n      }else{\n        display2.textContent = display2.textContent + displayText.textContent + ' ='\n      }\n      displayText.textContent = ( accumulated - formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 });    \n      break;\n    case 'multiply':\n      display2.textContent = display2.textContent + displayText.textContent + ' ='\n      displayText.textContent = ( accumulated * formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      break;\n    case 'divide':\n      display2.textContent = display2.textContent + displayText.textContent + ' ='\n      displayText.textContent = ( accumulated / formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 }); \n      break;\n    case 'percent':\n      display2.textContent = display2.textContent + ' =';\n      displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      break;\n  }\n\n  accumulated = formatNumber( displayText.textContent );\n  operation = 'result'\n};\n\nexport const showError = ()=>{\n  displayText.textContent = 'ERROR';\n  display2.textContent = '';\n  display2.classList.remove('display2-bg');\n  accumulated = 0;\n  operation = '';\n}\n\nexport const backButton = ()=>{\n  if ( !displayText.textContent ) return\n\n  if ( displayText.textContent.length <= 2 ) { \n    displayText.textContent = 0\n    return\n  }\n  displayText.textContent =  displayText.textContent.slice(0,-1)\n}"]}