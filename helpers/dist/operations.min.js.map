{"version":3,"sources":["operations.js"],"names":["operation","display2","document","querySelector","accumulated","counter","formatNumber","displayTextContent","replaceAll","replace","setCounter","arguments","length","undefined","value","setAccumulated","setOperation","displayText","textContent","showError","toLocaleString","maximumFractionDigits","subtractNumber","console","multiplyNumber","divideNumber","displayValue","percentNumber","resultNumber","includes","remove","backButton","slice"],"mappings":"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","file":"operations.min.js","sourcesContent":["const display2 = document.querySelector('#display2');\nlet accumulated = 0;\nlet operation;\nlet counter = 0;\n\nconst formatNumber = ( displayTextContent )=> {\n\n  // CON ESTA FUNCION CORRIJO EL BUG DEL PUNTO EN NUMEROS ENTEROS EN ESPAÃ‘OL\n  return parseFloat( displayTextContent.replaceAll('.','').replace(',','.') ); \n\n}\n\nexport const setCounter = (value = counter)=> {\n  counter = value\n  return counter\n}\n\nexport const setAccumulated = (value = accumulated)=> {\n  accumulated = value\n  return accumulated\n}\n\nexport const setOperation = (value = operation)=> {\n  operation = value\n  return operation\n}\n\nexport const addNumber = ()=> {\n\n  if ( displayText.textContent === '0' && operation === 'divide' ) {\n    showError();\n    return\n  }\n    \n  if ( operation === 'result' ) {\n    display2.textContent = accumulated + ' + '\n    displayText.textContent = '0'\n    operation = 'add'\n    return\n  }\n\n  if( ! display2.textContent ) { \n    display2.textContent = displayText.textContent + ' + ';\n    accumulated += formatNumber( displayText.textContent );\n    counter += 1\n    operation = 'add'\n    return\n  };\n  \n  if (operation === 'subtract') {\n    accumulated -= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' - '\n  }else if( operation === 'percent' ){\n    displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  }else if( operation === 'divide' ){\n    accumulated /= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' / '\n  }else{\n    accumulated += formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' + '\n  }\n  \n  displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  counter += 1;\n  operation = 'add'\n  \n}\n  \nexport const subtractNumber = ()=> {\n\n    if ( displayText.textContent === '0' && operation === 'divide' ) {\n      showError();\n      return\n    }\n\n    if ( operation === 'result' ) {\n      display2.textContent = accumulated + ' - '\n      displayText.textContent = '0'\n      operation = 'subtract'\n      return\n    }\n    \n    if( !display2.textContent &&  displayText.textContent === '0' ) { \n      display2.textContent = '0 - ';\n      accumulated = formatNumber( displayText.textContent );\n      counter += 1\n      operation = 'subtract'\n      console.log(\"Entro aca!\")\n      return\n    };\n    \n    if( !display2.textContent ) { \n      display2.textContent = displayText.textContent + ' - ';\n      accumulated = formatNumber( displayText.textContent );\n      counter += 1\n      operation = 'subtract'\n      return\n    };\n    \n    if ( display2.textContent === '0 - ') {\n      display2.textContent =  '- ' + accumulated\n      accumulated -= formatNumber( displayText.textContent );\n      displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      counter += 1\n      operation = 'subtract'\n      return\n    }\n    \n    if (operation === 'add') {\n      accumulated += formatNumber( displayText.textContent );\n      display2.textContent = accumulated + ' + '\n    }else if( operation === 'percent' ){\n      displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n    }else if( operation === 'divide' ){\n      accumulated /= formatNumber( displayText.textContent );\n      display2.textContent = accumulated + ' / '\n    }else {\n      accumulated -= formatNumber( displayText.textContent );\n      display2.textContent = accumulated + ' - '\n    }\n    \n    displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n    counter += 1;\n    operation = 'subtract'\n    \n}\n  \nexport const multiplyNumber = ()=>{\n\n  if ( displayText.textContent === '0' && operation === 'divide' ) {\n    showError();\n    return\n  }\n  \n  if ( operation === 'result' ) {\n    display2.textContent = accumulated + ' * '\n    displayText.textContent = '0'\n    operation = 'multiply'\n    return\n  }\n\n  if( !display2.textContent ) { \n    accumulated = formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' * ';\n    counter += 1\n    operation = 'multiply'\n    return\n  };\n  \n  if (operation === 'subtract') {\n    accumulated -= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' - '\n  }else if( operation === 'divide' ){\n    accumulated /= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' / '\n  }else {\n    accumulated *= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' * '\n  }\n  \n  displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  counter += 1;\n  operation = 'multiply'\n}\n\nexport const divideNumber = ()=>{\n  \n    \n  if ( operation === 'result' ) {\n    display2.textContent = accumulated + ' / '\n    displayText.textContent = '0'\n    operation = 'divide'\n    return\n  }\n\n  if( !display2.textContent ) { \n    accumulated = formatNumber( displayText.textContent );\n    display2.textContent = displayText.textContent + ' / ';\n    counter += 1\n    operation = 'divide'\n    return\n  };\n\n  if ( displayText.textContent === '0' ) {\n    showError()\n    return\n  }\n  \n  if (operation === 'subtract') {\n    accumulated -= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' - '\n  }else {\n    accumulated /= formatNumber( displayText.textContent );\n    display2.textContent = accumulated + ' / '\n  }\n  \n  displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  counter += 1;\n  operation = 'divide'\n}\n\nexport const percentNumber = ()=>{\n  \n  if ( displayText.textContent === '0' && operation === 'divide' ) {\n    showError();\n    return\n  }\n\n  if ( operation === 'result' ) {\n    displayText.textContent = '0'\n    operation = 'percent'\n    return\n  };\n\n  if ( accumulated === 0 ) {\n    displayText.textContent = '0';\n    counter += 1\n    operation = 'percent'\n    return\n  }\n\n  if ( !display2.textContent ) { \n    display2.textContent = 0;\n    accumulated = 0;\n    counter += 1\n    operation = 'percent'\n    return\n  };\n\n  let displayValue = accumulated * formatNumber( displayText.textContent ) / 100;\n  \n  switch ( operation ) {\n    case 'add':\n      accumulated += displayValue;\n      displayText.textContent = displayValue;\n      display2.textContent = display2.textContent + displayValue;\n      break;\n    case 'subtract':\n      accumulated -= displayValue;\n      displayText.textContent = displayValue;\n      display2.textContent = display2.textContent + displayValue;\n      break;\n    case 'multiply':\n      accumulated *=  formatNumber( displayText.textContent ) / 100 ;\n      displayText.textContent = formatNumber( displayText.textContent ) / 100 ;\n      display2.textContent = display2.textContent + formatNumber( displayText.textContent ) / 100;\n      break;\n    case 'divide':\n      accumulated /=  formatNumber( displayText.textContent ) / 100;\n      displayText.textContent = formatNumber( displayText.textContent ) / 100 ;\n      display2.textContent = display2.textContent + formatNumber( displayText.textContent ) / 100;\n      break;\n  }\n        \n  counter += 1;\n  operation = 'percent'\n};\n\nexport const resultNumber = ()=> {\n  \n  if ( !operation ) return;\n\n  if ( displayText.textContent === '0' && operation === 'divide' ) {\n    showError();\n    return\n  }\n\n  switch ( operation ) {\n    case 'add':\n      ( display2.textContent.includes('=') ) ? display2.textContent = accumulated + ' + ' + displayText.textContent + ' =' : display2.textContent = display2.textContent + displayText.textContent + ' =';\n      displayText.textContent = ( accumulated + formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      break;\n    case 'subtract':\n      if ( display2.textContent === '- ' ) { \n        display2.textContent = '- ' + displayText.textContent\n      }else if( display2.textContent.includes('=') ){\n        display2.textContent = accumulated + ' - ' + displayText.textContent + ' =' \n      }else{\n        display2.textContent = display2.textContent + displayText.textContent + ' ='\n      }\n      displayText.textContent = ( accumulated - formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 });    \n      break;\n    case 'multiply':\n      ( display2.textContent.includes('=') ) ? display2.textContent = accumulated + ' * ' + displayText.textContent + ' =' : display2.textContent = display2.textContent + displayText.textContent + ' =';\n      displayText.textContent = ( accumulated * formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      break;\n    case 'divide':\n      ( display2.textContent.includes('=') ) ? display2.textContent = accumulated + ' / ' + displayText.textContent + ' =' : display2.textContent = display2.textContent + displayText.textContent + ' =';\n      displayText.textContent = ( accumulated / formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 }); \n      break;\n    case 'percent':\n      ( display2.textContent.includes('=') ) ? display2.textContent = accumulated + ' % ' + displayText.textContent + ' =' : display2.textContent = display2.textContent + ' =';\n      displayText.textContent = accumulated.toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      break;\n  }\n\n  accumulated = formatNumber( displayText.textContent );\n  operation = 'result'\n};\n\nexport const showError = ()=>{\n  displayText.textContent = 'ERROR';\n  display2.textContent = '';\n  display2.classList.remove('display2-bg');\n  accumulated = 0;\n  operation = '';\n}\n\nexport const backButton = ()=>{\n  if ( !displayText.textContent ) return\n\n  if ( displayText.textContent.length <= 2 ) { \n    displayText.textContent = 0\n    return\n  }\n  displayText.textContent =  displayText.textContent.slice(0,-1)\n}"]}