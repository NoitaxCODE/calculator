{"version":3,"sources":["operations.js"],"names":["_displayFunctions","require","_status","display2","document","querySelector","formatNumber","displayTextContent","parseFloat","replaceAll","replace","addNumber","setOperation","displayText","textContent","setCounter","setAccumulated","toLocaleString","maximumFractionDigits","showError","subtractNumber","multiplyNumber","percentNumber","divideNumber","displayValue","resultNumber","includes","length","slice"],"mappings":"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","file":"operations.min.js","sourcesContent":["import { showError } from \"./displayFunctions.js\";\nimport { setAccumulated, setCounter, setOperation } from \"./status.js\";\n\nconst display2 = document.querySelector('#display2');\n\nconst formatNumber = ( displayTextContent )=> {\n\n  // CON ESTA FUNCION CORRIJO EL BUG DEL PUNTO EN NUMEROS ENTEROS EN ESPAÃ‘OL\n  return parseFloat( displayTextContent.replaceAll('.','').replace(',','.') ); \n\n}\n\nexport const addNumber = ()=> {\n\n  if ( setOperation() === 'error' ) return\n\n  if ( displayText.textContent === '0' && setOperation() === 'divide' ) {\n    showError();\n    return\n  }\n\n  if( !display2.textContent && displayText.textContent === '0' ) { \n    display2.textContent = '0 + ';\n    setCounter( setCounter() + 1 );\n    setOperation( 'add' );\n    return\n  };\n    \n  if( ! display2.textContent ) { \n    display2.textContent = displayText.textContent + ' + ';\n    setAccumulated( setAccumulated() + formatNumber( displayText.textContent ));\n    setCounter( setCounter() + 1 )\n    setOperation( 'add' )\n    return\n  };\n\n  switch ( setOperation() ) {\n    case 'result' :\n      display2.textContent = setAccumulated() + ' + '\n      displayText.textContent = '0'\n      setOperation( 'add' );\n      return\n    case 'subtract' :\n      setAccumulated( setAccumulated() - formatNumber( displayText.textContent ) );\n      display2.textContent = setAccumulated() + ' - '\n      break;\n    case 'percent' :\n      displayText.textContent = setAccumulated().toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      break;\n    case 'divide' :\n      setAccumulated( setAccumulated() / formatNumber( displayText.textContent ) );\n      display2.textContent = setAccumulated() + ' / '\n      break;\n    default:\n      setAccumulated( setAccumulated() + formatNumber( displayText.textContent ) );\n      display2.textContent = setAccumulated() + ' + '\n      break;\n  }\n    \n  displayText.textContent = setAccumulated().toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  setCounter( setCounter() + 1 );\n  setOperation( 'add' );\n  \n}\n  \nexport const subtractNumber = ()=> {\n    \n    if ( setOperation() === 'error' ) return\n\n    if ( displayText.textContent === '0' && setOperation() === 'divide' ) {\n      showError();\n      return\n    }\n    \n    if( !display2.textContent &&  displayText.textContent === '0' ) { \n      display2.textContent = '0 - ';\n      setCounter( setCounter() + 1 );\n      setOperation( 'subtract' );\n      return\n    };\n    \n    if( !display2.textContent ) { \n      display2.textContent = displayText.textContent + ' - ';\n      setAccumulated( formatNumber( displayText.textContent ) );\n      setCounter( setCounter() + 1 );\n      setOperation( 'subtract' );\n      return\n    };\n    \n    if ( display2.textContent === '0 - ') {\n      display2.textContent =  '- ' + setAccumulated()\n      setAccumulated( setAccumulated() - formatNumber( displayText.textContent ) );\n      displayText.textContent = setAccumulated().toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      setCounter( setCounter() + 1 );\n      setOperation( 'subtract' );\n      return\n    }\n\n    switch ( setOperation() ) {\n      case 'result':\n        display2.textContent = setAccumulated() + ' - '\n        displayText.textContent = '0'\n        setOperation( 'subtract' )\n        return\n      case 'add':\n        setAccumulated( setAccumulated() + formatNumber( displayText.textContent ) );\n        display2.textContent = setAccumulated() + ' + '\n        break;\n      case 'percent':\n        displayText.textContent = setAccumulated().toLocaleString('es-ES', { maximumFractionDigits: 7 });\n        break;\n      case 'divide':\n        setAccumulated( setAccumulated() / formatNumber( displayText.textContent ) );\n        display2.textContent = setAccumulated() + ' / '\n        break;\n      default:\n        setAccumulated( setAccumulated() - formatNumber( displayText.textContent ) );\n        display2.textContent = setAccumulated() + ' - '\n        break;\n    }\n        \n    displayText.textContent = setAccumulated().toLocaleString('es-ES', { maximumFractionDigits: 7 });\n    setCounter( setCounter() + 1 );\n    setOperation( 'subtract' )\n    \n}\n  \nexport const multiplyNumber = ()=>{\n\n  if ( setOperation() === 'error' ) return\n\n  if ( displayText.textContent === '0' && setOperation() === 'divide' ) {\n    showError();\n    return\n  }\n\n  if( !display2.textContent &&  displayText.textContent === '0' ) { \n    display2.textContent = '0 * ';\n    setCounter( setCounter() + 1 );\n    setOperation( 'multiply' );\n    return\n  };\n  \n  if( !display2.textContent ) { \n    setAccumulated( formatNumber( displayText.textContent ) );\n    display2.textContent = setAccumulated() + ' * ';\n    setCounter( setCounter() + 1 );\n    setOperation( 'multiply' )\n    return\n  };\n\n  switch ( setOperation() ) {\n    case 'result':\n      display2.textContent = setAccumulated() + ' * '\n      displayText.textContent = '0'\n      setOperation( 'multiply' )\n      return\n    case 'subtract':\n      setAccumulated( setAccumulated() - formatNumber( displayText.textContent ) );\n      display2.textContent = setAccumulated() + ' - '\n      break;\n    case 'divide':\n      setAccumulated( setAccumulated() / formatNumber( displayText.textContent ) );\n      display2.textContent = setAccumulated() + ' / '\n      break;\n    default:\n      setAccumulated( setAccumulated() * formatNumber( displayText.textContent ) );\n      display2.textContent = setAccumulated() + ' * '\n      break;\n  }\n    \n  displayText.textContent = setAccumulated().toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  setCounter( setCounter() + 1 );\n  setOperation( 'multiply' );\n}\n\nexport const divideNumber = ()=>{\n  \n  if ( setOperation() === 'error' ) return\n\n  if( !display2.textContent ) { \n    setAccumulated( formatNumber( displayText.textContent ) );\n    display2.textContent = displayText.textContent + ' / ';\n    setCounter( setCounter() + 1 )\n    setOperation( 'divide' );\n    return\n  };\n\n  if ( displayText.textContent === '0' ) {\n    showError()\n    return\n  }\n  \n  switch ( setOperation() ) {\n    case 'result':\n      display2.textContent = setAccumulated() + ' / '\n      displayText.textContent = '0'\n      setOperation( 'divide' );\n      return\n    case 'subtract':\n      setAccumulated( setAccumulated() - formatNumber( displayText.textContent ) );\n      display2.textContent = setAccumulated() + ' - '\n      break;\n    default:\n      setAccumulated( setAccumulated() / formatNumber( displayText.textContent ) );\n      display2.textContent = setAccumulated() + ' / '\n      break;\n  }\n  \n  displayText.textContent = setAccumulated().toLocaleString('es-ES', { maximumFractionDigits: 7 });\n  setCounter( setCounter() + 1 );\n  setOperation( 'divide' );\n}\n\nexport const percentNumber = ()=>{\n\n  if ( setOperation() === 'error' ) return\n  \n  if ( displayText.textContent === '0' && setOperation() === 'divide' ) {\n    showError();\n    return\n  }\n\n  if ( setAccumulated() === 0 ) {\n    displayText.textContent = '0';\n    setCounter( setCounter() + 1 );\n    setOperation( 'percent' );\n    return\n  }\n\n  if ( !display2.textContent ) { \n    display2.textContent = 0;\n    setAccumulated( 0 );\n    setCounter( setCounter() + 1 );\n    setOperation( 'percent' );\n    return\n  };\n\n  let displayValue = setAccumulated() * formatNumber( displayText.textContent ) / 100;\n  \n  switch ( setOperation() ) {\n    case 'result':\n      displayText.textContent = '0'\n      setOperation( 'percent' );\n      return\n    case 'add':\n      setAccumulated( setAccumulated() + displayValue );\n      displayText.textContent = displayValue;\n      display2.textContent = display2.textContent + displayValue;\n      break;\n    case 'subtract':\n      setAccumulated( setAccumulated() - displayValue );\n      displayText.textContent = displayValue;\n      display2.textContent = display2.textContent + displayValue;\n      break;\n    case 'multiply':\n      setAccumulated( setAccumulated() * formatNumber( displayText.textContent ) / 100 );\n      displayText.textContent = formatNumber( displayText.textContent ) / 100 ;\n      display2.textContent = display2.textContent + formatNumber( displayText.textContent ) / 100;\n      break;\n    case 'divide':\n      setAccumulated( setAccumulated() / formatNumber( displayText.textContent ) / 100 );\n      displayText.textContent = formatNumber( displayText.textContent ) / 100 ;\n      display2.textContent = display2.textContent + formatNumber( displayText.textContent ) / 100;\n      break;\n  }\n        \n  setCounter( setCounter() + 1 );\n  setOperation( 'percent' );\n};\n\nexport const resultNumber = ()=> {\n\n  if ( setOperation() === 'error' ) return\n  \n  if ( !setOperation() ) return;\n\n  if ( displayText.textContent === '0' && setOperation() === 'divide' ) {\n    showError();\n    return\n  }\n\n  switch ( setOperation() ) {\n    case 'add':\n      ( display2.textContent.includes('=') ) ? display2.textContent = setAccumulated() + ' + ' + displayText.textContent + ' =' : display2.textContent = display2.textContent + displayText.textContent + ' =';\n      displayText.textContent = ( setAccumulated() + formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      break;\n    case 'subtract':\n      if ( display2.textContent === '- ' ) { \n        display2.textContent = '- ' + displayText.textContent\n      }else if( display2.textContent.includes('=') ){\n        display2.textContent = setAccumulated() + ' - ' + displayText.textContent + ' =' \n      }else{\n        display2.textContent = display2.textContent + displayText.textContent + ' ='\n      }\n      displayText.textContent = ( setAccumulated() - formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 });    \n      break;\n    case 'multiply':\n      ( display2.textContent.includes('=') ) ? display2.textContent = setAccumulated() + ' * ' + displayText.textContent + ' =' : display2.textContent = display2.textContent + displayText.textContent + ' =';\n      displayText.textContent = ( setAccumulated() * formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      break;\n    case 'divide':\n      ( display2.textContent.includes('=') ) ? display2.textContent = setAccumulated() + ' / ' + displayText.textContent + ' =' : display2.textContent = display2.textContent + displayText.textContent + ' =';\n      displayText.textContent = ( setAccumulated() / formatNumber( displayText.textContent ) ).toLocaleString('es-ES', { maximumFractionDigits: 7 }); \n      break;\n    case 'percent':\n      ( display2.textContent.includes('=') ) ? display2.textContent = setAccumulated() + ' % ' + displayText.textContent + ' =' : display2.textContent = display2.textContent + ' =';\n      displayText.textContent = setAccumulated().toLocaleString('es-ES', { maximumFractionDigits: 7 });\n      break;\n  }\n\n  setAccumulated( formatNumber( displayText.textContent ) );\n  setOperation( 'result' )\n};\n\nexport const backButton = ()=>{\n\n  if ( setOperation() === 'error' ) return\n\n  if ( !displayText.textContent ) return\n\n  if ( displayText.textContent.length <= 1 ) { \n    displayText.textContent = 0\n    return\n  }\n  displayText.textContent =  displayText.textContent.slice(0,-1)\n}"]}