{"version":3,"sources":["operations.js"],"names":["_displayFunctions","require","_status","display2","document","querySelector","formatNumber","displayTextContent","parseFloat","replaceAll","replace","addNumber","setOperation","textContent","setAccumulated","displayText","setCounter","setOperationStatus","toLocaleString","maximumFractionDigits","showError","subtractNumber","concat","console","log","multiplyNumber","divideNumber","percentNumber","displayValue","includes","resultNumber","backButton","slice"],"mappings":"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","file":"operations.min.js","sourcesContent":["import { showError } from \"./displayFunctions.js\";\nimport { setAccumulated, setCounter, setOperation, setOperationStatus } from \"./status.js\";\n\nconst display2 = document.querySelector(\"#display2\");\n\nconst formatNumber = (displayTextContent) => {\n  // CON ESTA FUNCION CORRIJO EL BUG DEL PUNTO EN NUMEROS ENTEROS EN ESPAÃ‘OL\n  return parseFloat(displayTextContent.replaceAll(\".\", \"\").replace(\",\", \".\"));\n};\n\nexport const addNumber = () => {\n\n  if (setOperation() === \"error\") return;\n  \n  if (display2.textContent === \"0 - \" || display2.textContent === \"0 * \") {\n    setOperation() === \"subtract\"\n      ? setAccumulated(setAccumulated() - formatNumber(displayText.textContent))\n      : setAccumulated(setAccumulated() * formatNumber(displayText.textContent));\n    display2.textContent = `${setAccumulated()} + `;\n    setCounter(1);\n    setOperation(\"add\");\n    return;\n  }\n\n  if (displayText.textContent === \"0\" && setOperation() === \"divide\") {\n    showError();\n    return;\n  }\n\n  if (!display2.textContent && displayText.textContent === \"0\") {\n    display2.textContent = \"0 + \";\n    setCounter(1);\n    setOperation(\"add\");\n    return;\n  }\n\n  if (!display2.textContent) {\n    display2.textContent = displayText.textContent + \" + \";\n    setAccumulated(setAccumulated() + formatNumber(displayText.textContent));\n    setCounter(1);\n    setOperation(\"add\");\n    return;\n  }\n\n  if ( setOperation() !== \"add\"  && setOperationStatus() ){\n    displayText.textContent = 0\n    setAccumulated(setAccumulated() + formatNumber(displayText.textContent));\n    setCounter(1);\n    setOperation(\"add\");\n    display2.textContent = setAccumulated() + \" + \";\n    return;\n  }\n\n  switch (setOperation()) {\n    case \"result\":\n      display2.textContent = setAccumulated() + \" + \";\n      displayText.textContent = \"0\";\n      setOperation(\"add\");\n      return;\n    case \"subtract\":\n      setAccumulated(setAccumulated() - formatNumber(displayText.textContent));\n      break;\n    case \"divide\":\n      setAccumulated(setAccumulated() / formatNumber(displayText.textContent));\n      break;\n    case \"multiply\":\n      setAccumulated(setAccumulated() * formatNumber(displayText.textContent));\n      break;\n    default:\n      \n      setAccumulated(setAccumulated() + formatNumber(displayText.textContent));\n      break;\n  }\n  display2.textContent = setAccumulated() + \" + \";\n  displayText.textContent = setAccumulated().toLocaleString(\"es-ES\", {\n    maximumFractionDigits: 7,\n  });\n  setCounter(1);\n  setOperation(\"add\");\n};\n\nexport const subtractNumber = () => {\n\n  console.log( setOperationStatus() )\n\n  if (setOperation() === \"error\") return;\n\n  if (display2.textContent === \"0 + \" || display2.textContent === \"0 * \") {\n    setOperation() === \"add\"\n      ? setAccumulated(setAccumulated() + formatNumber(displayText.textContent))\n      : setAccumulated(setAccumulated() * formatNumber(displayText.textContent));\n    display2.textContent = `${setAccumulated()} - `;\n    setCounter(1);\n    setOperation(\"subtract\");\n    return;\n  }\n\n  if (displayText.textContent === \"0\" && setOperation() === \"divide\") {\n    showError();\n    return;\n  }\n\n  if (!display2.textContent && displayText.textContent === \"0\") {\n    display2.textContent = \"0 - \";\n    setCounter(1);\n    setOperation(\"subtract\");\n    return;\n  }\n\n  if (!display2.textContent) {\n    display2.textContent = displayText.textContent + \" - \";\n    setAccumulated(formatNumber(displayText.textContent));\n    setCounter(1);\n    setOperation(\"subtract\");\n    return;\n  }\n\n\n  if ( setOperation() !== \"subtract\" && setOperationStatus() ){\n    console.log(\"entro en add\")\n    displayText.textContent = 0\n    setAccumulated(setAccumulated() + formatNumber(displayText.textContent));\n    setCounter(1);\n    setOperation(\"subtract\");\n    display2.textContent = setAccumulated() + \" - \";\n    return;\n  }\n\n\n  switch (setOperation()) {\n    case \"result\":\n      display2.textContent = setAccumulated() + \" - \";\n      displayText.textContent = \"0\";\n      setOperation(\"subtract\");\n      return;\n    case \"add\":\n\n      setAccumulated(setAccumulated() + formatNumber(displayText.textContent));\n      break;\n    case \"divide\":\n      setAccumulated(setAccumulated() / formatNumber(displayText.textContent));\n      break;\n    case \"multiply\":\n      setAccumulated(setAccumulated() * formatNumber(displayText.textContent));\n      break;\n    default:\n      \n      setAccumulated(setAccumulated() - formatNumber(displayText.textContent));\n      break;\n  }\n\n  display2.textContent = setAccumulated() + \" - \";\n  displayText.textContent = setAccumulated().toLocaleString(\"es-ES\", {\n    maximumFractionDigits: 7,\n  });\n  setCounter(1);\n  setOperation(\"subtract\");\n};\n\nexport const multiplyNumber = () => {\n\n  if (setOperation() === \"error\") return;\n\n  if (display2.textContent === \"0 + \" || display2.textContent === \"0 - \") {\n    setOperation() === \"subtract\"\n      ? setAccumulated(setAccumulated() - formatNumber(displayText.textContent))\n      : setAccumulated(setAccumulated() + formatNumber(displayText.textContent));\n    display2.textContent = `${setAccumulated()} * `;\n    setCounter(1);\n    setOperation(\"multiply\");\n    return;\n  }\n\n  if (displayText.textContent === \"0\" && setOperation() === \"divide\") {\n    showError();\n    return;\n  }\n\n  if (!display2.textContent && displayText.textContent === \"0\") {\n    display2.textContent = \"0 * \";\n    setCounter(1);\n    setOperation(\"multiply\");\n    return;\n  }\n\n  if (!display2.textContent) {\n    console.log(\"entro en el multi\")\n    setAccumulated(formatNumber(displayText.textContent));\n    display2.textContent = setAccumulated() + \" * \";\n    setCounter(1);\n    setOperation(\"multiply\");\n    return;\n  }\n\n  if ( setOperation() !== \"multiply\"  && setOperationStatus() ){\n    displayText.textContent = 0\n    setAccumulated(setAccumulated() + formatNumber(displayText.textContent));\n    setCounter(1);\n    setOperation(\"multiply\");\n    display2.textContent = setAccumulated() + \" * \";\n    return;\n  }\n\n  switch (setOperation()) {\n    case \"result\":\n      display2.textContent = setAccumulated() + \" * \";\n      displayText.textContent = \"0\";\n      setOperation(\"multiply\");\n      return;\n    case \"subtract\":\n      setAccumulated(setAccumulated() - formatNumber(displayText.textContent));\n      break;\n    case \"divide\":\n      setAccumulated(setAccumulated() / formatNumber(displayText.textContent));\n      break;\n    case \"add\":\n      setAccumulated(setAccumulated() + formatNumber(displayText.textContent));\n      break;\n    default:\n      setAccumulated(setAccumulated() * formatNumber(displayText.textContent));\n      break;\n  }\n\n  display2.textContent = setAccumulated() + \" * \";\n  displayText.textContent = setAccumulated().toLocaleString(\"es-ES\", {\n    maximumFractionDigits: 7,\n  });\n  setCounter(1);\n  setOperation(\"multiply\");\n};\n\nexport const divideNumber = () => {\n  if (setOperation() === \"error\") return;\n\n  if (!display2.textContent) {\n    setAccumulated(formatNumber(displayText.textContent));\n    display2.textContent = displayText.textContent + \" / \";\n    setCounter(1);\n    setOperation(\"divide\");\n    return;\n  }\n\n  if (displayText.textContent === \"0\") {\n    showError();\n    return;\n  }\n\n  if ( setOperation() !== \"divide\"  && setOperationStatus() ){\n    displayText.textContent = 0\n    setAccumulated(setAccumulated() + formatNumber(displayText.textContent));\n    setCounter(1);\n    setOperation(\"divide\");\n    display2.textContent = setAccumulated() + \" / \";\n    return;\n  }\n\n  switch (setOperation()) {\n    case \"result\":\n      display2.textContent = setAccumulated() + \" / \";\n      displayText.textContent = \"0\";\n      setOperation(\"divide\");\n      return;\n    case \"subtract\":\n      setAccumulated(setAccumulated() - formatNumber(displayText.textContent));\n      break;\n    case \"add\":\n      setAccumulated(setAccumulated() + formatNumber(displayText.textContent));\n      break;\n    case \"multiply\":\n      setAccumulated(setAccumulated() * formatNumber(displayText.textContent));\n      break;\n    default:\n      setAccumulated(setAccumulated() / formatNumber(displayText.textContent));\n      break;\n\n  }\n\n  displayText.textContent = setAccumulated().toLocaleString(\"es-ES\", {\n    maximumFractionDigits: 7,\n  });\n  display2.textContent = setAccumulated() + \" / \";\n  setCounter(1);\n  setOperation(\"divide\");\n};\n\nexport const percentNumber = () => {\n  if (setOperation() === \"error\") return;\n\n  if (displayText.textContent === \"0\" && setOperation() === \"divide\") {\n    showError();\n    return;\n  }\n\n  if (setAccumulated() === 0) {\n    displayText.textContent = \"0\";\n    setCounter(1);\n    setOperation(\"percent\");\n    return;\n  }\n\n  if (!display2.textContent) {\n    display2.textContent = 0;\n    setAccumulated(0);\n    setCounter(1);\n    setOperation(\"percent\");\n    return;\n  }\n\n  let displayValue =\n    (setAccumulated() * formatNumber(displayText.textContent)) / 100;\n\n  switch (setOperation()) {\n    case \"result\":\n      displayText.textContent = \"0\";\n      setOperation(\"percent\");\n      return;\n    case \"add\":\n      setAccumulated(setAccumulated() + displayValue);\n      displayText.textContent = displayValue;\n      display2.textContent = display2.textContent + displayValue;\n      break;\n    case \"subtract\":\n      setAccumulated(setAccumulated() - displayValue);\n      displayText.textContent = displayValue;\n      display2.textContent = display2.textContent + displayValue;\n      break;\n    case \"multiply\":\n      setAccumulated(\n        (setAccumulated() * formatNumber(displayText.textContent)) / 100,\n      );\n      displayText.textContent = formatNumber(displayText.textContent) / 100;\n      display2.textContent =\n        display2.textContent + formatNumber(displayText.textContent) / 10;\n      break;\n    case \"divide\":\n      setAccumulated(\n        (setAccumulated() / formatNumber(displayText.textContent)) * 100,\n      );\n      displayText.textContent = formatNumber(displayText.textContent) / 100;\n      display2.textContent =\n        display2.textContent + formatNumber(displayText.textContent) / 10;\n      break;\n  }\n\n  setCounter(1);\n  setOperation(\"percent\");\n};\n\nexport const resultNumber = () => {\n  if (setOperation() === \"error\") return;\n\n  if (!setOperation()) return;\n\n  if (displayText.textContent === \"0\" && setOperation() === \"divide\") {\n    showError();\n    return;\n  }\n\n  switch (setOperation()) {\n    case \"add\":\n      display2.textContent.includes(\"=\")\n        ? (display2.textContent =\n          setAccumulated() + \" + \" + displayText.textContent + \" =\")\n        : (display2.textContent =\n          display2.textContent + displayText.textContent + \" =\");\n      displayText.textContent = (\n        setAccumulated() + formatNumber(displayText.textContent)\n      ).toLocaleString(\"es-ES\", { maximumFractionDigits: 7 });\n      break;\n    case \"subtract\":\n      if (display2.textContent === \"- \") {\n        display2.textContent = \"- \" + displayText.textContent;\n      } else if (display2.textContent.includes(\"=\")) {\n        display2.textContent =\n          setAccumulated() + \" - \" + displayText.textContent + \" =\";\n      } else {\n        display2.textContent =\n          display2.textContent + displayText.textContent + \" =\";\n      }\n      displayText.textContent = (\n        setAccumulated() - formatNumber(displayText.textContent)\n      ).toLocaleString(\"es-ES\", { maximumFractionDigits: 7 });\n      break;\n    case \"multiply\":\n      display2.textContent.includes(\"=\")\n        ? (display2.textContent =\n          setAccumulated() + \" * \" + displayText.textContent + \" =\")\n        : (display2.textContent =\n          display2.textContent + displayText.textContent + \" =\");\n      displayText.textContent = (\n        setAccumulated() * formatNumber(displayText.textContent)\n      ).toLocaleString(\"es-ES\", { maximumFractionDigits: 7 });\n      break;\n    case \"divide\":\n      display2.textContent.includes(\"=\")\n        ? (display2.textContent =\n          setAccumulated() + \" / \" + displayText.textContent + \" =\")\n        : (display2.textContent =\n          display2.textContent + displayText.textContent + \" =\");\n      displayText.textContent = (\n        setAccumulated() / formatNumber(displayText.textContent)\n      ).toLocaleString(\"es-ES\", { maximumFractionDigits: 7 });\n      break;\n    case \"percent\":\n      display2.textContent.includes(\"=\")\n        ? (display2.textContent =\n          setAccumulated() + \" % \" + displayText.textContent + \" =\")\n        : (display2.textContent = display2.textContent + \" =\");\n      displayText.textContent = setAccumulated().toLocaleString(\"es-ES\", {\n        maximumFractionDigits: 7,\n      });\n      break;\n  }\n\n  setAccumulated(formatNumber(displayText.textContent));\n  setOperation(\"result\");\n};\n\nexport const backButton = () => {\n  if (setOperation() === \"error\") return;\n\n  if (!displayText.textContent) return;\n\n  if (displayText.textContent.length <= 1) {\n    displayText.textContent = 0;\n    return;\n  }\n  displayText.textContent = displayText.textContent.slice(0, -1);\n};\n"]}